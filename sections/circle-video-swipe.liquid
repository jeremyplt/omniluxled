<div class="circle-video-swipe circle-video-menu-wrap circle-video-menu-wrap--{{ section.id }} {{ section.settings.div_id }}">
    <div class="circle-video-menu circle-video-menu--{{ section.id }} {% if section.settings.ignore %}circle-vide-menu--ignore{% endif %}">
        <div class="circle-menu-items">
        {% for block in section.blocks %}
            <a class="circle-video-menu-item">
            <span class="circle-video-menu-item-image">
                {{ block.settings.image | image_url: width: 120 | image_tag: class: 'circle-menu-item-img' }}
                {% render 'icon-play' %}
            </span>
            <span class="circle-menu-item-label">{{ block.settings.label }}</span>
            </a>
        {% endfor %}
        </div>
    </div>

    <div class="circle-video-swipe__modal">
        <div class="circle-video-swipe__slider keen-slider">
            {% for block in section.blocks %}
                <div class="circle-video__item keen-slider__slide">
                    <div class="loading-spinner"></div>
                    {{ block.settings.video | video_tag }}
                </div>
            {% endfor %}
        </div>
        <div class="modal__controls">
            <div class="modal__button modal__sound">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.114 5.636a9 9 0 0 1 0 12.728M16.463 8.288a5.25 5.25 0 0 1 0 7.424M6.75 8.25l4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.009 9.009 0 0 1 2.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75Z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 9.75 19.5 12m0 0 2.25 2.25M19.5 12l2.25-2.25M19.5 12l-2.25 2.25m-10.5-6 4.72-4.72a.75.75 0 0 1 1.28.53v15.88a.75.75 0 0 1-1.28.53l-4.72-4.72H4.51c-.88 0-1.704-.507-1.938-1.354A9.009 9.009 0 0 1 2.25 12c0-.83.112-1.633.322-2.396C2.806 8.756 3.63 8.25 4.51 8.25H6.75Z" />
                </svg>
            </div>
            <div class="modal__button modal__close">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                </svg>
            </div>
        </div>
        <div class="modal__swipe-animation">
            <span style="margin-bottom: 1rem;">Swipe up</span>
            <span style="transform: rotate(180deg)">
              <script src="https://unpkg.com/@dotlottie/player-component@latest/dist/dotlottie-player.mjs" type="module"></script> 
              <dotlottie-player src="https://lottie.host/9e15963a-59ab-415c-ac89-6fa66ca3baa1/Q84skeKrwV.json" background="transparent" speed="3" style="width: 100px; height: 100px;" loop autoplay></dotlottie-player>
            </span>
        </div>
    </div>
</div>

<style>
  .circle-video-menu--{{ section.id }} .circle-video-menu-item-image {
    border-color: {{ section.settings.border_color }};
  }
</style>

<style>
  .loading-spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 50px;
    height: 50px;
    margin-top: -25px;
    margin-left: -25px;
    border: 6px solid #ccc;
    border-top-color: #000;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    z-index: 10;
    display: block !important;
  }

  .loading-spinner.hidden {
    display: none;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .circle-video-menu--{{ section.id }} .circle-video-menu-item-image {
    border-color: {{ section.settings.border_color }};
  }
</style>

<!-- Keep the HTML structure the same as before -->

<script>
document.addEventListener("DOMContentLoaded", () => {
  const modal = document.querySelector('.circle-video-swipe__modal');
  const videoItems = Array.from(modal.querySelectorAll('.circle-video__item'));
  let slider;
  let currentIndex = 0;

  function prepareVideo(video) {
    if (!video) return;
    video.preload = 'metadata';
    video.playsInline = true;
    // Remove muted attribute to allow sound
    video.muted = false;
    if (video.src) {
      video.dataset.src = video.src;
      video.removeAttribute('src');
    }
  }

  async function loadVideo(index) {
    const item = videoItems[index];
    if (!item) return;

    const spinner = item.querySelector('.loading-spinner');
    const video = item.querySelector('video');

    if (!video) return;

    if (!video.src && video.dataset.src) {
      spinner.classList.remove('hidden');
      video.src = video.dataset.src;

      try {
        await new Promise((resolve, reject) => {
          video.addEventListener('loadeddata', resolve, { once: true });
          video.addEventListener('error', reject, { once: true });
          setTimeout(reject, 10000, new Error('Video loading timeout'));
        });
      } catch (error) {
        console.error(`Error loading video ${index}:`, error);
      } finally {
        spinner.classList.add('hidden');
      }
    } else {
      // If video is already loaded, just hide the spinner
      spinner.classList.add('hidden');
    }

    return video;
  }

  async function loadAdjacentVideos(index) {
    const promises = [
      loadVideo(index - 1),
      loadVideo(index),
      loadVideo(index + 1)
    ];
    await Promise.all(promises);
  }

  function initializeSlider() {
    if (slider) return;

    slider = new KeenSlider(".circle-video-swipe__slider", {
      vertical: true,
      slideChanged: (s) => {
        const newIndex = s.track.details.rel;
        if (newIndex !== currentIndex) {
          currentIndex = newIndex;
          loadAdjacentVideos(currentIndex);
          updateVideoPlayback();
        }
      }
    });
  }

  function updateVideoPlayback() {
    videoItems.forEach((item, i) => {
      const video = item.querySelector('video');
      const spinner = item.querySelector('.loading-spinner');
      if (video) {
        if (i === currentIndex) {
          video.play().catch(e => console.error('Error playing video:', e));
          spinner.classList.add('hidden');
        } else {
          video.pause();
          video.currentTime = 0;
        }
      }
    });
  }

  // Prepare all videos initially
  videoItems.forEach(item => {
    const video = item.querySelector('video');
    prepareVideo(video);
  });

  document.querySelectorAll('.circle-video-menu--{{ section.id }} .circle-video-menu-item').forEach((item, i) => {
    item.addEventListener('click', async () => {
      document.documentElement.style.overflow = 'hidden';
      document.body.style.overflow = 'hidden';
      modal.classList.add('modal--active');

      currentIndex = i;
      await loadAdjacentVideos(currentIndex);
      initializeSlider();
      slider.moveToIdx(currentIndex);
      updateVideoPlayback();

      setTimeout(() => {
        document.querySelector('.modal__swipe-animation').style.display = "none";
      }, 6000);
    });
  });

  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  document.querySelector(".modal__close").addEventListener("click", closeModal);

  function closeModal() {
    document.documentElement.style.overflow = 'auto';
    document.body.style.overflow = 'auto';
    modal.classList.remove('modal--active');
    videoItems.forEach(item => {
      const video = item.querySelector('video');
      if (video) {
        video.pause();
        video.currentTime = 0;
      }
    });
  }

  document.querySelector(".modal__sound").addEventListener("click", () => {
    const video = videoItems[currentIndex].querySelector('video');
    if (video) {
      video.muted = !video.muted;
    }
    document.querySelector(".modal__sound").classList.toggle("muted");
  });
});
</script>

{% schema %}
{
  "name": "Circle video swipe",
  "class": "circle-video-menu-wrap-wrap",
  "settings": [
    {
      "label": "Border color",
      "id": "border_color",
      "type": "color",
      "default": "#000000"
    },
    {
      "label": "Section Product ID",
      "id": "div_id",
      "type": "text"
    },
    {
      "label": "Ignore theme fonts",
      "id": "ignore",
      "type": "checkbox",
      "default": true
    }
  ],
  "blocks": [
    {
      "name": "Circle link",
      "type": "circle-link",
      "settings": [
        {
          "label": "Image",
          "id": "image",
          "type": "image_picker"
        },
        {
          "label": "Label",
          "id": "label",
          "type": "text"
        },
        {
          "label": "Video url",
          "id": "video",
          "type": "video"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Circle video swipe"
    }
  ]
}
{% endschema %}